# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: message.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='message.proto',
  package='dlfa',
  syntax='proto3',
  serialized_pb=_b('\n\rmessage.proto\x12\x04\x64lfa\"\x1a\n\x08Instance\x12\x0e\n\x06\x66ields\x18\x01 \x03(\t\"3\n\x0fQuestionRequest\x12 \n\x08question\x18\x01 \x01(\x0b\x32\x0e.dlfa.Instance\"\"\n\x10QuestionResponse\x12\x0e\n\x06scores\x18\x01 \x03(\x01\x32R\n\rSolverService\x12\x41\n\x0e\x41nswerQuestion\x12\x15.dlfa.QuestionRequest\x1a\x16.dlfa.QuestionResponse\"\x00\x42\x12\n\x10org.allenai.dlfab\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_INSTANCE = _descriptor.Descriptor(
  name='Instance',
  full_name='dlfa.Instance',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='fields', full_name='dlfa.Instance.fields', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=23,
  serialized_end=49,
)


_QUESTIONREQUEST = _descriptor.Descriptor(
  name='QuestionRequest',
  full_name='dlfa.QuestionRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='question', full_name='dlfa.QuestionRequest.question', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=51,
  serialized_end=102,
)


_QUESTIONRESPONSE = _descriptor.Descriptor(
  name='QuestionResponse',
  full_name='dlfa.QuestionResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scores', full_name='dlfa.QuestionResponse.scores', index=0,
      number=1, type=1, cpp_type=5, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=104,
  serialized_end=138,
)

_QUESTIONREQUEST.fields_by_name['question'].message_type = _INSTANCE
DESCRIPTOR.message_types_by_name['Instance'] = _INSTANCE
DESCRIPTOR.message_types_by_name['QuestionRequest'] = _QUESTIONREQUEST
DESCRIPTOR.message_types_by_name['QuestionResponse'] = _QUESTIONRESPONSE

Instance = _reflection.GeneratedProtocolMessageType('Instance', (_message.Message,), dict(
  DESCRIPTOR = _INSTANCE,
  __module__ = 'message_pb2'
  # @@protoc_insertion_point(class_scope:dlfa.Instance)
  ))
_sym_db.RegisterMessage(Instance)

QuestionRequest = _reflection.GeneratedProtocolMessageType('QuestionRequest', (_message.Message,), dict(
  DESCRIPTOR = _QUESTIONREQUEST,
  __module__ = 'message_pb2'
  # @@protoc_insertion_point(class_scope:dlfa.QuestionRequest)
  ))
_sym_db.RegisterMessage(QuestionRequest)

QuestionResponse = _reflection.GeneratedProtocolMessageType('QuestionResponse', (_message.Message,), dict(
  DESCRIPTOR = _QUESTIONRESPONSE,
  __module__ = 'message_pb2'
  # @@protoc_insertion_point(class_scope:dlfa.QuestionResponse)
  ))
_sym_db.RegisterMessage(QuestionResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\020org.allenai.dlfa'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class SolverServiceStub(object):
  """The service definition
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AnswerQuestion = channel.unary_unary(
        '/dlfa.SolverService/AnswerQuestion',
        request_serializer=QuestionRequest.SerializeToString,
        response_deserializer=QuestionResponse.FromString,
        )


class SolverServiceServicer(object):
  """The service definition
  """

  def AnswerQuestion(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SolverServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AnswerQuestion': grpc.unary_unary_rpc_method_handler(
          servicer.AnswerQuestion,
          request_deserializer=QuestionRequest.FromString,
          response_serializer=QuestionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dlfa.SolverService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaSolverServiceServicer(object):
  """The service definition
  """
  def AnswerQuestion(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaSolverServiceStub(object):
  """The service definition
  """
  def AnswerQuestion(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  AnswerQuestion.future = None


def beta_create_SolverService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('dlfa.SolverService', 'AnswerQuestion'): QuestionRequest.FromString,
  }
  response_serializers = {
    ('dlfa.SolverService', 'AnswerQuestion'): QuestionResponse.SerializeToString,
  }
  method_implementations = {
    ('dlfa.SolverService', 'AnswerQuestion'): face_utilities.unary_unary_inline(servicer.AnswerQuestion),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_SolverService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('dlfa.SolverService', 'AnswerQuestion'): QuestionRequest.SerializeToString,
  }
  response_deserializers = {
    ('dlfa.SolverService', 'AnswerQuestion'): QuestionResponse.FromString,
  }
  cardinalities = {
    'AnswerQuestion': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'dlfa.SolverService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
